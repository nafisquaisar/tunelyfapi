package com.tunelyf.nf.controller;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.tunelyf.nf.model.Genre;
import com.tunelyf.nf.model.Song;

@Controller
@RequestMapping("/admin")
public class AdminController {

    @Autowired
    private RestTemplate restTemplate;

    @Value("${backend.api.url}")
    private String backendUrl;

    @GetMapping("/login")
    public String loginPage() {
        return "login";
    }
    
    @GetMapping("/demo")
    public String demo() {
        return "demo";
    }

    @GetMapping("/genres")
    public String showGenres(Model model) {
        List<String> genres = List.of(
            "Pop", "Rock", "Hip Hop", "Jazz", "Classical", "Electronic", "R&B", "Reggae", "Blues",
            "Country", "Folk", "Disco", "EDM", "Soul", "Trap", "Instrumental", "Lo-fi",
            "Bollywood", "K-Pop", "Indie", "Sad", "Love", "Romance"
        );

        model.addAttribute("genres", genres);
        model.addAttribute("currentUri", "/admin/genres");
        return "genres"; // This is the Thymeleaf page
    }


    @GetMapping("/genres/{genreName}/songs")
    public String showSongsByGenre(@PathVariable("genreName") String genreName, Model model) {
        String url = backendUrl + "/songs/genre/" + genreName;
        ResponseEntity<Song[]> response = restTemplate.getForEntity(url, Song[].class);
        List<Song> songs = Arrays.asList(response.getBody());
        model.addAttribute("songs", songs);
        model.addAttribute("genreName", genreName);
        return "songs-by-genre";
    }

    @GetMapping("/artists/{artistName}/songs")
    public String showSongsByArtist(@PathVariable("artistName") String artistName, Model model) {
        String url = backendUrl + "/songs/artist/" + artistName;
        ResponseEntity<Song[]> response = restTemplate.getForEntity(url, Song[].class);
        List<Song> songs = Arrays.asList(response.getBody());
        model.addAttribute("songs", songs);
        model.addAttribute("genreName", artistName); // reuse label
        return "songs-by-genre";
    }


    @GetMapping("/dashboard")
    public String dashboard(Model model) {
        String url = backendUrl + "/songs/allsong";
        List<Song> songs = List.of(restTemplate.getForObject(url, Song[].class));
       
        model.addAttribute("songs", songs);
        return "dashboard";
    }

    @GetMapping("/upload")
    public String uploadForm(@RequestParam(value = "success", required = false) String success, Model model) {
        model.addAttribute("song", new Song());
        if (success != null) {
            model.addAttribute("successMessage", "ðŸŽ‰ Song uploaded successfully!");
        }
        return "upload";
    }


    @PostMapping("/uploadsong")
    public String uploadSong(@RequestParam("title") String title,
                             @RequestParam("artist") String artist,
                             @RequestParam("genre") String genre,
                             @RequestParam("thumbnailFile") MultipartFile thumbnailFile,
                             @RequestParam("songFile") MultipartFile songFile,
                             Model model) throws IOException {

        String uploadUrl = backendUrl + "/songs/upload";

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("title", title);
        body.add("artist", artist);
        body.add("genre", genre);

        // âœ… Use ByteArrayResource instead
        body.add("thumbnailFile", new ByteArrayResource(thumbnailFile.getBytes()) {
            @Override
            public String getFilename() {
                return thumbnailFile.getOriginalFilename();
            }
        });

        body.add("songFile", new ByteArrayResource(songFile.getBytes()) {
            @Override
            public String getFilename() {
                return songFile.getOriginalFilename();
            }
        });

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
        restTemplate.postForEntity(uploadUrl, requestEntity, String.class);

     // Redirect after successful upload
        return "redirect:/admin/upload?success";

    }

    @PostMapping("/editsong")
    public String editSong(@RequestParam("id") Long id,
                           @RequestParam("title") String title,
                           @RequestParam("artist") String artist,
                           @RequestParam("genre") String genre,
                           @RequestParam(value = "thumbnailFile", required = false) MultipartFile thumbnailFile,
                           @RequestParam(value = "songFile", required = false) MultipartFile songFile) throws IOException {

        String editUrl = backendUrl + "/songs/edit";

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("id", id);
        body.add("title", title);
        body.add("artist", artist);
        body.add("genre", genre);

        if (thumbnailFile != null && !thumbnailFile.isEmpty()) {
            body.add("thumbnailFile", new ByteArrayResource(thumbnailFile.getBytes()) {
                @Override
                public String getFilename() {
                    return thumbnailFile.getOriginalFilename();
                }
            });
        }

        if (songFile != null && !songFile.isEmpty()) {
            body.add("songFile", new ByteArrayResource(songFile.getBytes()) {
                @Override
                public String getFilename() {
                    return songFile.getOriginalFilename();
                }
            });
        }

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
        restTemplate.postForEntity(editUrl, requestEntity, String.class);

        return "redirect:/admin/dashboard";
    }


    @GetMapping("/delete/{id}")
    public String deleteSong(@PathVariable Long id) {
        String url = backendUrl + "/songs/" + id;
        restTemplate.delete(url);
        return "redirect:/admin/dashboard";
    }
}
