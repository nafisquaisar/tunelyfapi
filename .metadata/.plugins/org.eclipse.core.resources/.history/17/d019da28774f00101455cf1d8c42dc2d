<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tunelyf Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet"/>
  <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.min.js"></script>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background: linear-gradient(135deg, #141E30, #243B55);
      color: #fff;
      padding: 20px;
    }

    .main-header {
      background-color: #1f2a40;
      padding: 15px 25px;
      border-radius: 12px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }

    .logo {
      font-size: 22px;
      font-weight: 600;
    }

    .nav-links a {
      margin: 0 12px;
      color: #ddd;
      text-decoration: none;
      font-weight: 500;
      transition: color 0.3s ease;
    }

    .nav-links a:hover,
    .nav-links a.active {
      color: #4db8ff;
    }

    .logout-btn {
      background-color: #4db8ff;
      border: none;
      padding: 8px 16px;
      border-radius: 8px;
      color: white;
      font-weight: 600;
      cursor: pointer;
    }

    .search-sort-bar {
      display: flex;
      justify-content: space-between;
      margin: 25px 0;
      gap: 10px;
    }

    .search-input, .sort-select {
      padding: 10px 14px;
      border-radius: 8px;
      border: 1px solid #394b6b;
      background-color: #2d3e5f;
      color: white;
    }

    .search-input {
      width: 70%;
    }

    .song-container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 16px 30px;
      max-height: 70vh;
      overflow-y: auto;
      padding-right: 10px;
    }

    .song-row {
      display: flex;
      align-items: center;
      background: #1f2a40;
      padding: 10px;
      border-radius: 10px;
      position: relative;
      transition: background 0.3s ease;
    }

    .song-row:hover {
      background: #2a3a55;
    }

    .thumb-wrapper {
      position: relative;
      width: 45px;
      height: 45px;
      flex-shrink: 0;
    }

    .song-thumb {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 8px;
    }

    .play-icon {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-size: 18px;
      background-color: rgba(0,0,0,0.4);
      border-radius: 50%;
      padding: 4px;
      display: none;
    }

    .thumb-wrapper:hover .play-icon {
      display: block;
    }

    .song-info {
      flex: 1;
      margin-left: 12px;
      overflow: hidden;
    }

    .song-title {
      font-size: 15px;
      font-weight: 600;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .song-meta {
      font-size: 12px;
      color: #bbb;
    }

    .song-options {
      position: relative;
      cursor: pointer;
      font-size: 20px;
      padding-left: 10px;
    }

    .options-menu {
      display: none;
      position: absolute;
      right: 0;
      top: 25px;
      background-color: #2d3e5f;
      border: 1px solid #394b6b;
      border-radius: 8px;
      padding: 5px 0;
      min-width: 100px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      z-index: 10;
    }

    .options-menu div {
      padding: 8px 12px;
      color: #fff;
      cursor: pointer;
    }

    .options-menu div:hover {
      background-color: #4db8ff;
      color: #000;
    }

    #playerBar {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: #1f2a40;
      border-top: 1px solid #394b6b;
      display: flex;
      align-items: center;
      padding: 10px 20px;
      z-index: 1001;
    }

    #playerBar img {
      width: 40px;
      height: 40px;
      object-fit: cover;
      border-radius: 6px;
      margin-right: 15px;
    }

    .player-info {
      flex: 1;
      color: #fff;
    }

    #playerTitle {
      font-weight: bold;
    }

    #playerArtist {
      font-size: 12px;
      color: #bbb;
    }

    #audioPlayer {
      width: 200px;
    }
  </style>
</head>
<body>
  <header class="main-header">
    <div class="logo">üéµ Tunelyf</div>
    <nav class="nav-links">
      <a th:href="@{/admin/dashboard}" th:classappend="${currentUri == '/admin/dashboard'} ? 'active'">All Songs</a>
      <a th:href="@{/admin/upload}" th:classappend="${currentUri == '/admin/upload'} ? 'active'">Upload Song</a>
    </nav>
    <form action="/logout" method="post">
      <button class="logout-btn" type="submit">Logout</button>
    </form>
  </header>

  <div class="search-sort-bar">
    <input type="text" placeholder="Search songs..." class="search-input" />
    <select class="sort-select">
      <option value="latest">Latest</option>
      <option value="popular">Popular</option>
      <option value="a-z">A-Z</option>
    </select>
  </div>

  <div class="song-container">
    <div class="song-row"
         th:each="song : ${songs}"
         th:attr="data-id=${song.id}, data-title=${song.title}, data-artist=${song.artist}, data-genre=${song.genre}, data-url=${song.url}, data-thumb=${song.thumbnail}"
         onclick="playSong(this)">
      <div class="thumb-wrapper">
        <img th:src="${song.thumbnail != null ? song.thumbnail : '/img/song.jpeg'}" alt="Thumbnail" class="song-thumb" />
        <div class="play-icon">&#9658;</div>
      </div>
      <div class="song-info">
        <div class="song-title" th:text="${song.title}">Title</div>
        <div class="song-meta" th:text="${song.artist} + ' ‚Ä¢ ' + ${song.genre}">Artist ‚Ä¢ Genre</div>
      </div>
      <div class="song-options" onclick="event.stopPropagation(); toggleOptions(this)">
        ‚ãÆ
        <div class="options-menu">
          <div onclick="openEditFromList(this)">‚úèÔ∏è Edit</div>
          <div onclick="deleteSongFromList(this)">üóëÔ∏è Delete</div>
        </div>
      </div>
    </div>
  </div>

  <div id="playerBar">
    <img id="playerThumb" src="/img/song.jpeg" alt="Thumbnail" />
    <div class="player-info">
      <div id="playerTitle">Not Playing</div>
      <div id="playerArtist">---</div>
    </div>
    <audio id="audioPlayer" controls></audio>
  </div>

  <div id="editModal" style="display:none;">
    <!-- modal content same as before -->
  </div>

  <script>
    function playSong(el) {
      const title = el.dataset.title;
      const artist = el.dataset.artist;
      const url = el.dataset.url;
      const thumb = el.dataset.thumb;

      document.getElementById('playerTitle').textContent = title;
      document.getElementById('playerArtist').textContent = artist;
      document.getElementById('playerThumb').src = thumb || '/img/song.jpeg';

      const audio = document.getElementById('audioPlayer');
      audio.src = url;
      audio.play();
    }

    function toggleOptions(el) {
      const menu = el.querySelector('.options-menu');
      document.querySelectorAll('.options-menu').forEach(m => {
        if (m !== menu) m.style.display = 'none';
      });
      menu.style.display = (menu.style.display === 'block') ? 'none' : 'block';
    }

    document.addEventListener('click', () => {
      document.querySelectorAll('.options-menu').forEach(menu => {
        menu.style.display = 'none';
      });
    });

    function openEditFromList(el) {
      const parent = el.closest('.song-row');
      const id = parent.dataset.id;
      const title = parent.dataset.title;
      const artist = parent.dataset.artist;
      const genre = parent.dataset.genre;
      // fill modal inputs
      document.getElementById('editId').value = id;
      document.getElementById('editTitle').value = title;
      document.getElementById('editArtist').value = artist;
      document.getElementById('editGenre').value = genre;
      document.getElementById('editModal').style.display = 'block';
    }

    function deleteSongFromList(el) {
      const parent = el.closest('.song-row');
      const songId = parent.dataset.id;

      if (confirm('Are you sure you want to delete this song?')) {
        fetch(`/admin/deletesong/${songId}`, {
          method: 'DELETE'
        }).then(res => {
          if (res.ok) {
            parent.remove();
            alert('Song deleted successfully');
          } else {
            alert('Failed to delete song');
          }
        });
      }
    }
  </script>
</body>
</html>
