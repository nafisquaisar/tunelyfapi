package com.tunelyf.nf.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import com.tunelyf.nf.model.Song;

@Controller
@RequestMapping("/admin")
public class AdminController {

    @Autowired
    private RestTemplate restTemplate;

    @Value("${backend.api.url}")
    private String backendUrl;

    @GetMapping("/login")
    public String loginPage() {
        return "login";
    }
    
    @GetMapping("/demo")
    public String demo() {
        return "demo";
    }


    @GetMapping("/dashboard")
    public String dashboard(Model model) {
        String url = backendUrl + "/songs";
        List<Song> songs = List.of(restTemplate.getForObject(url, Song[].class));
       
        model.addAttribute("songs", songs);
        return "dashboard";
    }

    @GetMapping("/upload")
    public String uploadForm(Model model) {
        model.addAttribute("song", new Song());
        return "upload";
    }

    @PostMapping("/upload")
    public String uploadSong(@RequestParam("title") String title,
                             @RequestParam("artist") String artist,
                             @RequestParam("genre") String genre,
                             @RequestParam("thumbnailFile") MultipartFile thumbnailFile,
                             @RequestParam("songFile") MultipartFile songFile) throws IOException {

        String uploadUrl = backendUrl + "/songs/upload";

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("title", title);
        body.add("artist", artist);
        body.add("genre", genre);

        // Use InputStreamResource instead of ByteArrayResource
        body.add("thumbnailFile", new InputStreamResource(thumbnailFile.getInputStream()) {
            @Override
            public String getFilename() {
                return thumbnailFile.getOriginalFilename();
            }
        });

        body.add("songFile", new InputStreamResource(songFile.getInputStream()) {
            @Override
            public String getFilename() {
                return songFile.getOriginalFilename();
            }
        });

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
        restTemplate.postForEntity(uploadUrl, requestEntity, String.class);

        return "redirect:/admin/dashboard";
    }



    @GetMapping("/delete/{id}")
    public String deleteSong(@PathVariable Long id) {
        String url = backendUrl + "/songs/" + id;
        restTemplate.delete(url);
        return "redirect:/admin/dashboard";
    }
}
